[{"name":"VariablesBetweenCaseOf.AccessInCases","comment":"\n\n@docs forbid\n\n","unions":[],"aliases":[],"values":[{"name":"forbid","comment":" Reports when a variable between `case .. of` is used in any of the cases\n\n    config =\n        [ VariablesBetweenCaseOf.AccessInCases.forbid\n        ]\n\n\n## reported\n\n    case arguments of\n        [] ->\n            \"no arguments\"\n\n        _ :: _ ->\n            arguments |> String.join \", \"\n\nThe rule collects variables even inside tuples, variants and lists.\n\n\n## not reported\n\n    case arguments of\n        [] ->\n            \"no arguments\"\n\n        firstArg :: args1Up ->\n            (firstArg :: args1Up) |> String.join \", \"\n\nThe rule does not collect variables inside records, functions, operations, ...\n\n    case originalList |> List.drop 4 of\n        [] ->\n            \"less than 5 arguments\"\n\n        _ :: _\n            originalList |> String.join \", \"\n\n\n## When (not) to use\n\nThis rule is not useful when you would fix\n\n    case list of\n        [] ->\n            \"no arguments\"\n\n        _ :: _ ->\n            list |> String.join \", \"\n\nto\n\n    case list of\n        [] ->\n            \"no arguments\"\n\n        list_ ->\n            list_ |> String.join \", \"\n\nThat's not the purpose of this rule!\n\nThe motivation is preventing you from forgetting to use certain information and referring to the wrong variables.\nFor more details, check [the readme](https://package.elm-lang.org/packages/lue-bird/elm-review-variables-between-case-of-access-in-cases/1.0.0#why)\n\n","type":"Review.Rule.Rule"}],"binops":[]}]